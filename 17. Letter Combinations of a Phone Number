public class Solution {
    public List<String> letterCombinations(String digits) {
        LinkedList<String> res = new LinkedList<>();
        if (digits == null || digits.length() == 0) {
            return res;
        }
        String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        res.add("");
        for (int i = 0; i < digits.length();i++) {
            int x = Character.getNumericValue(digits.charAt(i));
            while (res.peek().length() == i) {
                String t = res.remove();
                for (char s : mapping[x].toCharArray()) {
                    res.add(t + s);
                }
            }
        }
        return res;
    }
}


private final String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
public List<String> getWord(String s) {
    List<String> res = new ArrayList<>();
    if (s == null || s.length() == 0) {
        return res;
    }
    char[] array = s.toCharArray();
    StringBuilder sb = new StringBuilder();
    dfs(res, array, sb);
    return res;    
}
private void dfs(List<String> res, char[] array, StringBuilder sb) {
    if (sb.length() == array.length) {
            res.add(sb.toString());
            return;         
    }
    int digit = array[sb.length()] - '0'
    for (int i = 0; i < map[digit - 1].length(); i++) {
        sb.append(map[digit - 2].charAt(i);
        dfs(res, array, sb);
        sb.deleteCharAt(sb.length() - 1);
    }
}
