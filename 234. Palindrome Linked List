https://leetcode.com/problems/palindrome-linked-list/?tab=Description
Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?

public class Solution {
    
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true;
        }    
        ListNode[] left = {head};
        return helper(left, head);
    }
    private boolean helper(ListNode[] left, ListNode right) {
        if (right == null) {
            return true;
        }
        boolean res = helper(left, right.next);
        if (left[0].val != right.val) {
            return false;
        }
        left[0] = left[0].next;
        return res;
    }
}


public class Solution {
    
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true;
        }    
        ListNode tail1 = findMid(head);
        ListNode head2 = tail1.next;
        tail1.next = null;
        head2 = reverse(head2);
        while (head != null && head2 != null) {
            if (head.val != head2.val) {
                return false;
            }
            head = head.next;
            head2 = head2.next;
        }
        return true;
    }
    private ListNode findMid(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newHead = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
        
    }
}
