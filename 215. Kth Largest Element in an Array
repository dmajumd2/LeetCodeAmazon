Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length


public class Solution {
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length < k ) {
            return -1;
        }
        int target = nums.length - k;
        return helper(nums, 0, nums.length - 1, target);
    }
    private int helper(int[] nums, int left, int right, int k) {
        if (left == right) {
            return nums[left];
        }
        int pivotIdx = partition(nums, left, right);
        if (pivotIdx == k) {
            return nums[pivotIdx];
        } else if (pivotIdx < k) {
            return helper(nums, pivotIdx + 1, right, k);
        } else {
            return helper(nums, left, pivotIdx - 1, k);
        }
    }
    private int partition(int[] nums, int left, int right) {
        int pivotIdx = getIdx(left, right);
        int pivot = nums[pivotIdx];
        swap(nums, pivotIdx, right);
        int rightBound = right;
        while (left <= right) {
            if (nums[left] < pivot) {
                left++;
            } else if (nums[right] >= pivot) {
                right--;
            } else {
                swap(nums, left, right);
            }
        }
        swap(nums, left, rightBound);
        return left;
    }
    private int getIdx(int left, int right) {
        return left + (int) (Math.random() * (right - left + 1));
    }
      private void swap(int[] array, int left, int right) {
        int temp = array[left];
        array[left] = array[right];
        array[right] = temp;
    }

}
