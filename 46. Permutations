https://leetcode.com/problems/permutations/?tab=Description

Given a collection of distinct numbers, return all possible permutations.

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        helper(res, nums, 0);
        return res;
    }
    private void helper(List<List<Integer>> res, int[] nums, int level) {
        if (level == nums.length) {
            res.add(getList(nums));
            return;
        }
        for (int i = level; i < nums.length; i++) {
            swap(nums, i, level);
            helper(res, nums, level + 1);
            swap(nums, i, level);
        }
    }
        
    private void swap(int[] array, int left, int right) {
    int temp = array[left];
    array[left] = array[right];
    array[right] = temp;
  }

    private List<Integer> getList(int[] nums) {
        List<Integer> res = new ArrayList<>();
        for (int num :  nums) {
            res.add(num);
        }
        return res;
    }
}
