https://leetcode.com/problems/path-sum-ii/?tab=Description
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        if (root == null) {
            return res;
        }
        helper(res, cur, 0, root, sum);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> cur, int sum, TreeNode root, int target) {
        if (root == null) {
            return;
        }
        sum += root.val;
        cur.add(root.val);
        if (root.left == null && root.right == null) {
            if (sum == target) {
                res.add(new ArrayList<>(cur));
            }
        }
        helper(res, cur, sum, root.left, target);
        helper(res, cur, sum, root.right, target);
        cur.remove(cur.size() - 1);
    }
}
