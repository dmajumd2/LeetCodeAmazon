230. Kth Smallest Element in a BST
https://leetcode.com/problems/kth-smallest-element-in-a-bst/

Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?
//BST
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if (root == null || k < 0) {
            return -1;
        }
        int count = countNodes(root.left);
        if (count + 1 == k) {
            return root.val;
        } else if (count + 1 < k) {
            return kthSmallest(root.right, k - count - 1);
        } else {
            return kthSmallest(root.left, k);
        }
    }
    private int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}
// in order traversal recursive
public class Solution {
    int count = 0;
    int res = 0;
    public int kthSmallest(TreeNode root, int k) {
        if (root == null || k < 0) {
            return -1;
        }
        count = k;
        helper(root);
        return res;
    }
    private void helper(TreeNode root) {
        if (root == null) {
            return;
        }
        helper(root.left);
        count--;
        if (count == 0) {
            res = root.val;
            return;
        }
        helper(root.right);
    }
}

// in order tranversal iterative

public class Solution {
   
    public int kthSmallest(TreeNode root, int k) {
        if (root == null || k < 0) {
            return -1;
        }
        Deque<TreeNode> stack = new ArrayDeque<>();
        TreeNode cur = root;
        while (cur != null  || !stack.isEmpty()) {
            if (cur != null) {
                stack.offerFirst(cur);
                cur = cur.left;
            } else {
                cur = stack.pollFirst();
                k--;
                if (k == 0) {
                    return cur.val;
                }
                cur = cur.right;
            }
        }
        return -1;
    }
}
