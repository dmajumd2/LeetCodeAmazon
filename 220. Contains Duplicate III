https://leetcode.com/problems/contains-duplicate-iii/?tab=Description

Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0 || t < 0  || k < 1) {
            return false;
        }
        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long floor = set.floor((long)nums[i]);
            Long ceiling = set.ceiling((long)nums[i]);
            if ((floor != null && nums[i] - floor <= t)
            || (ceiling != null && ceiling - nums[i] <= t)) {
                return true;
            }
            set.add((long)nums[i]);
            if (i >= k) {
                set.remove((long)nums[i - k]);
            }
        }
        return false;
    }
}


public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0 || t < 0  || k < 1) {
            return false;
        }
        Map<Long, Long> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            long num = (long)nums[i] - Integer.MIN_VALUE;
            long bucket = num / ((long) t + 1);
            if (map.containsKey(bucket)
            || (map.containsKey(bucket - 1) && num - map.get(bucket - 1) <= t)
            ||  (map.containsKey(bucket + 1) && map.get(bucket + 1) - num <= t)) {
                return true;
            }
            if (map.size() >= k) {
                long lastNum = (long)nums[i - k] - Integer.MIN_VALUE;
                long lastBucket = lastNum / ((long) t + 1);
                map.remove(lastBucket);
            }
             map.put(bucket, num);
        }
        return false;
    }
}
