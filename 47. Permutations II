public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        helper(nums, 0, res);
        return res;
    }
    private void helper(int[] nums, int level, List<List<Integer>> res) {
        if (level == nums.length) {
            res.add(getList(nums));
            return;
        }
        Set<Integer> set = new HashSet<>();
        for (int i = level; i < nums.length; i++) {
            if (set.add(nums[i])) {
                swap(nums, i, level);
                helper(nums, level + 1, res);
                swap(nums, i, level);
            }
        }
    }
    private List<Integer> getList(int[] nums) {
        List<Integer> res = new ArrayList<>();
        for (int num : nums) {
            res.add(num);
        }
        return res;
    }
     private void swap(int[] array, int left, int right) {
    int temp = array[left];
    array[left] = array[right];
    array[right] = temp;
  }
}
